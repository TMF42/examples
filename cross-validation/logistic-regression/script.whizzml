;;get_logistic_options
;;
;; maps the options to be used in logistic regression
;; Inputs:
;;   balance-fields: (boolean) Whether to scale each numeric field
;;   bias: (boolean) Whether to include an intercept term
;;   c: (number) Step of the regularization step
;;   missing-numerics: (boolean) Sets the logistic regression missing_numerics
;;                               flag
;;   default-numeric-value: (string) List of values to be used as
;;                                   objective_weights
;;   eps: (number) Stopping criteria for solver
;;   field-codings: (list) Coding schemes for categorical fields: 'dummy',
;;                         'contrast', or 'other'
;;   normalize: (boolean) Whether to normalize feature vectors
;;   regularization: (string) Selects the norm to minimize when regularizing
;;                            the solution: 'l1' or 'l2'
;;   seed: (string) Seed used in random samplings
;; Output: (map) options map
;;
(define (get_logistic_options balance-fields
                              bias
                              c
                              missing-numerics
                              default-numeric-value
                              eps
                              field-codings
                              normalize
                              regularization
                              seed)
  (let (options {"balance_fields" balance-fields
                 "bias" bias
                 "c" c
                 "missing_numerics" missing-numerics
                 "eps" eps
                 "field_codings" field-codings
                 "normalize" normalize
                 "regularization" regularization}
        options (if (empty? seed)
                    options
                   (assoc options "seed" seed)))
    (if (empty? default-numeric-value)
        options
        (assoc options "default_numeric_value" default-numeric-value))))


;; logistic-cross-validation
;;
;; creates k-fold cross-validation for a dataset using logistic regressions
;; Inputs:
;;   dataset-id: (string) Dataset ID
;;   k-folds: (integer) Number of folds
;;   objective-id: (string) ID of the objective field
;;   balance-fields: (boolean) Whether to scale each numeric field
;;   bias: (boolean) Whether to include an intercept term
;;   c: (number) Step of the regularization step
;;   missing-numerics: (boolean) Sets the logistic regression missing_numerics
;;                               flag
;;   default-numeric-value: (string) List of values to be used as
;;                                   objective_weights
;;   eps: (number) Stopping criteria for solver
;;   field-codings: (list) Coding schemes for categorical fields: 'dummy',
;;                         'contrast', or 'other'
;;   normalize: (boolean) Whether to normalize feature vectors
;;   regularization: (string) Selects the norm to minimize when regularizing
;;                            the solution: 'l1' or 'l2'
;;   seed: (string) Seed used in random samplings
;;   delete-resources?: (boolean) Whether to delete all intermediate resources
;;   stratified?: (boolean) Whether to stratify sampling in k-folds across classes
;;
;; Output: (map) Average of evaluations results
;;
(define (logistic-cross-validation dataset-id
                                   k-folds
                                   objective-id
                                   balance-fields
                                   bias
                                   c
                                   missing-numerics
                                   default-numeric-value
                                   eps
                                   field-codings
                                   normalize
                                   regularization
                                   seed
                                   delete-resources?
                                   . stratified?)
  (let (options (get_logistic_options balance-fields
                                      bias
                                      c
                                      missing-numerics
                                      default-numeric-value
                                      eps
                                      field-codings
                                      normalize
                                      regularization
                                      seed)
        objective-id (if (empty? objective-id)
                         (dataset-get-objective-id dataset-id)
                         objective-id)
        dft-evaluation-options {})
    (ds-cross-validation dataset-id k-folds objective-id  "logisticregression"
                         options dft-evaluation-options
                         delete-resources? stratified?)))


(define cross-validation-output
  (logistic-cross-validation dataset-id
                             k-folds
                             objective-id
                             balance-fields
                             bias
                             c
                             missing-numerics
                             default-numeric-value
                             eps
                             field-codings
                             normalize
                             regularization
                             seed
                             delete-resources?
                             stratified?))
