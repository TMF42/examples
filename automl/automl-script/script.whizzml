;; Whether we should reuse resources from a given execution
(define reuse-resources (not (= (resource-type train-dataset) "dataset")))
;; Get the value of an input parameter from the current
;; execution, or from a previous execution if it is given
;; Input parameters from automl-execution overwrite the ones
;; given by the user in the current execution
(define (get-input name)
  (let (get-value (lambda(input) (if reuse-resources
                                   (input-from-exec automl-execution name)
                                   input)))
    (cond (= name "configuration-params") (get-value configuration-params)
          (= name "train-dataset") (get-value train-dataset))))

;; Execution configuration parameters
(define config (get-input "configuration-params"))

(when (not (= config configuration-params))
  (log-warn "WARNING: Configuration params from the automl-execution "
            " overwrite the given params")
  (log-info "Configuration used: ")
  (log-info config))

(log-featured "Initial checks")
(log-info "Checking execution input datasets")
(check-inputs train-dataset holdout-dataset test-dataset automl-execution)
(log-info "Checking input dataset fields")
(check-datasets-fields (get-input "train-dataset")
                       holdout-dataset
                       test-dataset)
(log-info "Check configuration params")
(check-configuration-params config)
(check-models-configuration (config "models-configuration"))
(log-info "Checking excluded-models")
(check-excluded-models (config "excluded-models"))
(log-info "More configuration parameters checks")
(check-params (config "pca-variance-threshold")
              (config "max-association-rules")
              (config "holdout-rate"))

;; holdout-split: Only used for Evaluation
;; validation-split: Only used during Model Selection
(define [holdout-split validation-split train-split]
  (if reuse-resources
    ;; If we are reusing resources, we don't need the train dataset
    [holdout-dataset "" ""]
    (let (user-train-ds (get-input "train-dataset")
          holdout-rate (config "holdout-rate")
          valid-rate 0.2)
      (if (= (resource-type holdout-dataset) "dataset")
        (cons holdout-dataset (dataset-split user-train-ds valid-rate))
        (let ([holdout train*] (dataset-split user-train-ds holdout-rate))
          (cons holdout (dataset-split train* valid-rate)))))))

(define (sampled-ds-maybe ds-id shallow)
  (let (columns (resource-property (wait ds-id) "columns")
        rows (resource-property ds-id "rows")
        name (resource-name ds-id)
        ;; The sampled dataset should contain at least 20
        ;; rows per dataset column
        ratio (/ (* columns 20) rows))
    (log-info "Sampling dataset with ratio: " ratio)
    (if (or (> ratio 1) (not shallow))
      ds-id
      (create-dataset ds-id {"sample_rate" ratio
                             "name" (str name " - sampled")}))))

;; Retrieve all non-preferred fields from all the datasets
(define non-preferred-fields
  (remove-duplicates
   (flatten
    (map (lambda(ds)
           (if (and ds (> (count (resource-id ds)) 0))
             (field-names-from-ids (non-preferred ds) ds)
             []))
         [train-split validation-split test-dataset]))))

(log-info "These fields will be set as non-preferred:")
(log-info non-preferred-fields)

(log-featured "Feature generation")
(log-info "Obtaining unsupervised models")
;; Returns a list of unsupervised-models from a dataset
(define (create-unsupervised-models dataset excluded excluded-models shallow)
  (let (dataset (sampled-ds-maybe dataset shallow)
        _ (set-non-preferred dataset non-preferred-fields)
        params {"excluded_fields" (field-ids-from-names excluded dataset)}
        objective-id (dataset-get-objective-id dataset)
        lift-params (merge params {"rhs_predicate" [{"field" objective-id}]
                                   "search_strategy" "lift"})
        ;; leverage metric is not used in shallow-search
        lev-params (when (not shallow)
                     (merge params {"rhs_predicate" [{"field" objective-id}]
                                    "search_strategy" "leverage"}))
        all-models
        (map (lambda (type params*)
               (when (and (create-unsupervised? type excluded-models) params*)
                 (let (opt (merge params*
                                  ((config "models-configuration") type {})))
                   (create-unsupervised type dataset opt))))
        ["association" "association" "cluster" "anomaly" "pca" "topicmodel"]
        [lev-params lift-params params params params params]))
    (remove-false all-models)))

;; Returns a list of unsupervised model from an execution output
(define (get-unsupervised-models automl-exec excluded-models)
  (filter (lambda(m)(create-unsupervised? (resource-type m) excluded-models))
          (output-from-exec automl-exec "unsupervised-models")))

;; List that contains all the created unsupervised models
(define unsupervised-models
  (let (exc-fields (config "excluded-fields")
        exc-models (config "excluded-models"))
    (if reuse-resources
      (get-unsupervised-models automl-execution exc-models)
      (create-unsupervised-models train-split
                                  exc-fields
                                  exc-models
                                  shallow-search))))

(log-info "Generating new features from unsupervised models")
(define (feature-generation dataset-id
                            model-list
                            excluded
                            pca-threshold
                            max-rules)
  (let (excluded (remove-false (field-ids-from-names excluded dataset-id))
        objective-id (dataset-get-objective-id dataset-id)
        name (resource-name dataset-id)
        feat-gen (lambda (model-type batch-type params)
                   (unsupervised-feature-gen dataset-id
                                             model-list
                                             name
                                             model-type
                                             batch-type
                                             params))
        cluster-fields (feat-gen "cluster" "batchcentroid" {})
        anomaly-fields (feat-gen "anomaly" "batchanomalyscore" {})
        topic-fields (feat-gen "topicmodel" "batchtopicdistribution" {})
        pca-params {"variance_threshold" pca-threshold}
        pca-fields (feat-gen "pca" "batchprojection" pca-params)
        dataset-assoc (assoc-feature-gen dataset-id
                                         model-list
                                         name
                                         excluded
                                         max-rules)
        all-fields [cluster-fields anomaly-fields topic-fields pca-fields]
        all-ds (cons dataset-assoc (map batch-output-ds all-fields)))
    (feature-generation-dataset all-ds name objective-id non-preferred-fields)))

(define extended-datasets
  (let (exc-fields (config "excluded-fields")
        pca-threshold (config "pca-variance-threshold")
        max-rules (floor (config "max-association-rules")))
    (map (lambda(dataset)
           (when (= (resource-type dataset) "dataset")
             (log-info " - Extending dataset: " (resource-name dataset))
             (feature-generation dataset
                                 unsupervised-models
                                 exc-fields
                                 pca-threshold
                                 max-rules)))
         [train-split validation-split holdout-split test-dataset])))


(log-featured "Feature Selection")
(log-info "Obtaining the most important features")

;; Obtains the list of important fields from
;; a previous execution
(define (retrieve-important-fields exec)
  (when (= (resource-type exec) "execution")
    (output-from-exec exec "selected-fields")))

;; Obtains the most important fields from a dataset
;; using recursive feature elimination
;;
;; - If shallow-search, fixed number
;;   of fields after rfe, 30, with no evaluations.
;; - If not shallow-search we want, at least 50 fields.
;;   We will perform evaluations. If the total
;;   number of fields is lower, we will skip
;;   feature selection stage.
(define (compute-important-fields train shallow)
  (let (min-fields-shallow 30
        min-fields-non-shallow 50
        balance (config "balance-objective")
        [valid* train*] (dataset-split train 0.2)
        valid* (if shallow "" valid*)
        sampled-train (wait (sampled-ds-maybe train* shallow))
        total-fields (count (keys (resource-fields train)))
        min-fields (if shallow min-fields-shallow min-fields-non-shallow)
        rfe-output (rfe sampled-train min-fields "" valid* "" balance)
        evaluations (rfe-output "evaluations" {})
        num-features (if shallow
                       (min total-fields min-fields-shallow)
                       (if (> total-fields min-fields)
                         (rfe-best-num-features evaluations)
                         total-fields)))
    (rfe-output-fields sampled-train rfe-output num-features shallow)))


;; Obtains the most important fields (a list with their names)
;; from a train dataset
(define selected-fields
  (concat non-preferred-fields
          (if reuse-resources
            (retrieve-important-fields automl-execution)
            (let ([train _ _ _] extended-datasets)
              (compute-important-fields train shallow-search)))))

(log-info "Filtering the datasets")
;; Creates the filtered datasets from the extended datasets,
;; filtering out all the fields not present in selected-fields list
(define filtered-datasets
  (map (lambda (ds)
         (when (= "dataset" (resource-type ds))
           (let (name (str (resource-name ds) " | filtered")
                 fields (field-ids-from-names selected-fields ds))
             (set-non-preferred
              (create-dataset {"name" name  "origin_dataset" ds
                               "input_fields" (remove-duplicates fields)})
              non-preferred-fields))))
       extended-datasets))

(log-featured "Model Selection")
;; Creates the final fusion model with the top 3 models
;; from an optiml generated with the filtered datasets
(define output-fusion
  (let ([train valid _ _] filtered-datasets)
    (if reuse-resources
      (retrieve-fusion automl-execution)
      (fusion-from-optiml
       (create-optiml-model train
                            valid
                            ((config "models-configuration") "optiml" {})
                            shallow-search)
       3))))


(log-featured "Final dataset and evaluation")
(log-info "Creating output dataset")
;; Creates the final output dataset with the
;; original fields and the predictions from
;; the fusion model
(define output-dataset
  (when (= (resource-type test-dataset) "dataset")
    (let ([_ _ _ test] filtered-datasets)
      (prediction-from-fusion output-fusion test))))

(log-info "Creating output evaluation")
;; Creates the final evaluation from the validation
;; dataset and the fusion
(define output-evaluation
  (when (= (resource-type holdout-split) "dataset")
    (let ([_ _ holdout _] filtered-datasets)
      (create-evaluation output-fusion holdout))))
